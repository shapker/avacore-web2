// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentData = null;
let activityChart = null;
let mediaChart = null;

// –§—É–Ω–∫—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function showSection(sectionName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã
    document.querySelectorAll('.content-section').forEach(section => {
        section.style.display = 'none';
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª
    document.getElementById(sectionName + 'Section').style.display = 'block';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelectorAll('.nav-link').forEach(link => {
        link.classList.remove('active');
    });
    event.target.classList.add('active');
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    if (sectionName === 'stats' && currentData) {
        setTimeout(() => {
            updateCharts();
        }, 100);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ URL
function decompressData() {
    try {
        const urlParams = new URLSearchParams(window.location.search);
        const compressedData = urlParams.get('data');
        
        if (!compressedData) {
            throw new Error('–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ URL');
        }
        
        console.log('üîó –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ URL:', compressedData.length, '—Å–∏–º–≤–æ–ª–æ–≤');
        
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
        const binaryString = atob(compressedData);
        const bytes = new Uint8Array(binaryString.length);
        for (let i = 0; i < binaryString.length; i++) {
            bytes[i] = binaryString.charCodeAt(i);
        }
        
        // –î–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏—è —Å –ø–æ–º–æ—â—å—é pako
        const decompressed = pako.inflate(bytes, { to: 'string' });
        const data = JSON.parse(decompressed);
        
        console.log('üìä –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏—Ä–æ–≤–∞–Ω—ã:', data);
        return data;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏–∏:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function displayStats(data) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    document.getElementById('lastUpdate').textContent = 
        `–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date().toLocaleString('ru-RU')}`;
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const statsCards = document.getElementById('statsCards');
    statsCards.innerHTML = `
        <div class="col-md-3 mb-4">
            <div class="card stats-card bg-primary text-white">
                <div class="card-body text-center">
                    <i class="fas fa-comments fa-2x mb-3"></i>
                    <h3 class="card-title">${data.total_messages}</h3>
                    <p class="card-text">–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-4">
            <div class="card stats-card bg-success text-white">
                <div class="card-body text-center">
                    <i class="fas fa-font fa-2x mb-3"></i>
                    <h3 class="card-title">${data.text_messages}</h3>
                    <p class="card-text">–¢–µ–∫—Å—Ç–æ–≤—ã—Ö</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-4">
            <div class="card stats-card bg-info text-white">
                <div class="card-body text-center">
                    <i class="fas fa-photo-video fa-2x mb-3"></i>
                    <h3 class="card-title">${data.media_messages}</h3>
                    <p class="card-text">–ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-4">
            <div class="card stats-card bg-warning text-white">
                <div class="card-body text-center">
                    <i class="fas fa-users fa-2x mb-3"></i>
                    <h3 class="card-title">${data.unique_senders}</h3>
                    <p class="card-text">–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π</p>
                </div>
            </div>
        </div>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
function displayMessages(messages) {
    const messagesTable = document.getElementById('messagesTable');
    
    if (!messages || messages.length === 0) {
        messagesTable.innerHTML = `
            <tr>
                <td colspan="4" class="text-center py-4">
                    <i class="fas fa-inbox fa-2x text-muted mb-2"></i>
                    <p class="text-muted">–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</p>
                </td>
            </tr>
        `;
        return;
    }
    
    let html = '';
    messages.forEach((msg, index) => {
        const messageType = msg.is_media ? '–ú–µ–¥–∏–∞' : '–¢–µ–∫—Å—Ç';
        const typeBadge = msg.is_media ? 
            '<span class="badge bg-info"><i class="fas fa-file"></i> –ú–µ–¥–∏–∞</span>' : 
            '<span class="badge bg-primary"><i class="fas fa-text"></i> –¢–µ–∫—Å—Ç</span>';
        
        const content = msg.is_media ? 
            `<i class="fas fa-file"></i> ${msg.path ? msg.path.split('/').pop() : '–§–∞–π–ª'}` : 
            (msg.text ? msg.text.substring(0, 100) + (msg.text.length > 100 ? '...' : '') : '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
        
        const date = msg.date ? new Date(msg.date).toLocaleString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        
        html += `
            <tr>
                <td>${typeBadge}</td>
                <td>${msg.user_login || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</td>
                <td>${content}</td>
                <td><small class="text-muted">${date}</small></td>
            </tr>
        `;
    });
    
    messagesTable.innerHTML = html;
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ–¥–∏–∞
function displayMediaStats(mediaStats) {
    const mediaStatsCards = document.getElementById('mediaStatsCards');
    
    const mediaTypes = [
        { type: 'photo', name: '–§–æ—Ç–æ', icon: 'fa-camera', color: 'primary' },
        { type: 'video', name: '–í–∏–¥–µ–æ', icon: 'fa-video', color: 'success' },
        { type: 'audio', name: '–ê—É–¥–∏–æ', icon: 'fa-microphone', color: 'info' },
        { type: 'sticker', name: '–°—Ç–∏–∫–µ—Ä—ã', icon: 'fa-smile', color: 'warning' },
        { type: 'document', name: '–î–æ–∫—É–º–µ–Ω—Ç—ã', icon: 'fa-file', color: 'secondary' }
    ];
    
    let html = '';
    mediaTypes.forEach(mediaType => {
        const count = mediaStats[mediaType.type] || 0;
        html += `
            <div class="col-md-4 mb-4">
                <div class="card stats-card bg-${mediaType.color} text-white">
                    <div class="card-body text-center">
                        <i class="fas ${mediaType.icon} fa-2x mb-3"></i>
                        <h3 class="card-title">${count}</h3>
                        <p class="card-text">${mediaType.name}</p>
                    </div>
                </div>
            </div>
        `;
    });
    
    mediaStatsCards.innerHTML = html;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
function createCharts(data) {
    createActivityChart(data.daily_stats);
    createMediaDistributionChart(data.media_stats);
}

function createActivityChart(dailyStats) {
    const ctx = document.getElementById('activityChart').getContext('2d');
    
    // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (activityChart) {
        activityChart.destroy();
    }
    
    const labels = dailyStats.map(day => {
        const date = new Date(day.date);
        return date.toLocaleDateString('ru-RU', { weekday: 'short', month: 'short', day: 'numeric' });
    });
    
    const counts = dailyStats.map(day => day.count);
    
    activityChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [{
                label: '–°–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å',
                data: counts,
                backgroundColor: 'rgba(54, 162, 235, 0.1)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 2,
                tension: 0.4,
                fill: true
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    display: false
                },
                title: {
                    display: true,
                    text: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 7 –¥–Ω–µ–π'
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                }
            }
        }
    });
}

function createMediaDistributionChart(mediaStats) {
    const ctx = document.getElementById('mediaChart').getContext('2d');
    
    // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (mediaChart) {
        mediaChart.destroy();
    }
    
    const mediaTypes = ['photo', 'video', 'audio', 'sticker', 'document'];
    const labels = ['–§–æ—Ç–æ', '–í–∏–¥–µ–æ', '–ê—É–¥–∏–æ', '–°—Ç–∏–∫–µ—Ä—ã', '–î–æ–∫—É–º–µ–Ω—Ç—ã'];
    const data = mediaTypes.map(type => mediaStats[type] || 0);
    const backgroundColors = [
        'rgba(54, 162, 235, 0.8)',
        'rgba(75, 192, 192, 0.8)',
        'rgba(153, 102, 255, 0.8)',
        'rgba(255, 205, 86, 0.8)',
        'rgba(201, 203, 207, 0.8)'
    ];
    
    mediaChart = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: labels,
            datasets: [{
                data: data,
                backgroundColor: backgroundColors,
                borderWidth: 2,
                borderColor: '#fff'
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'bottom'
                }
            },
            cutout: '60%'
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
function updateCharts() {
    if (currentData) {
        createCharts(currentData);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏
function showError(message) {
    document.getElementById('loadingSection').style.display = 'none';
    document.getElementById('errorSection').style.display = 'block';
    document.getElementById('errorMessage').textContent = message;
    console.error('‚ùå –û—à–∏–±–∫–∞:', message);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function initApp() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Avacore Web...');
    
    try {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ URL
        const data = decompressData();
        currentData = data;
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        document.getElementById('loadingSection').style.display = 'none';
        document.getElementById('mainContent').style.display = 'block';
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        displayStats(data);
        displayMessages(data.recent_messages);
        displayMediaStats(data.media_stats);
        createCharts(data);
        
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        
    } catch (error) {
        showError(error.message);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    setTimeout(initApp, 1000);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ñ—É—Ç–µ—Ä–µ
    document.querySelector('footer a').addEventListener('click', function(e) {
        e.preventDefault();
        location.reload();
    });
});
